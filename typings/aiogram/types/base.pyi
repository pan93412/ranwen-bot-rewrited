"""
This type stub file was generated by pyright.
"""

import io
import typing
from typing import TypeVar
from .fields import BaseField
from ..utils.mixins import ContextInstanceMixin
from ..bot.bot import Bot

if typing.TYPE_CHECKING:
    ...
PROPS_ATTR_NAME = '_props'
VALUES_ATTR_NAME = '_values'
ALIASES_ATTR_NAME = '_aliases'
InputFile = TypeVar('InputFile', 'InputFile', io.BytesIO, io.FileIO, str)
String = TypeVar('String', bound=str)
Integer = TypeVar('Integer', bound=int)
Float = TypeVar('Float', bound=float)
Boolean = TypeVar('Boolean', bound=bool)
T = TypeVar('T')
class MetaTelegramObject(type):
    """
    Metaclass for telegram objects
    """
    _objects = ...
    def __new__(mcs: ,, name: str, bases: ,, namespace: ,, **kwargs: typing.Any) -> T:
        ...
    
    @property
    def telegram_types(cls):
        ...
    


class TelegramObject(ContextInstanceMixin, metaclass=MetaTelegramObject):
    """
    Abstract class for telegram objects
    """
    def __init__(self, conf: , = ..., **kwargs: typing.Any) -> None:
        """
        Deserialize object

        :param conf:
        :param kwargs:
        """
        ...
    
    @property
    def conf(self) -> ,:
        ...
    
    @property
    def props(self) -> ,:
        """
        Get props

        :return: dict with props
        """
        ...
    
    @property
    def props_aliases(self) -> ,:
        """
        Get aliases for props

        :return:
        """
        ...
    
    @property
    def values(self) -> ,:
        """
        Get values

        :return:
        """
        ...
    
    @property
    def telegram_types(self) -> ,:
        ...
    
    @classmethod
    def to_object(cls: ,, data: ,) -> T:
        """
        Deserialize object

        :param data:
        :return:
        """
        ...
    
    @property
    def bot(self) -> Bot:
        ...
    
    def to_python(self) -> ,:
        """
        Get object as JSON serializable

        :return:
        """
        ...
    
    def clean(self) -> None:
        """
        Remove empty values
        """
        ...
    
    def as_json(self) -> str:
        """
        Get object as JSON string

        :return: JSON
        :rtype: :obj:`str`
        """
        ...
    
    @classmethod
    def create(cls: ,, *args: typing.Any, **kwargs: typing.Any) -> T:
        ...
    
    def __str__(self) -> str:
        """
        Return object as string. Alias for '.as_json()'

        :return: str
        """
        ...
    
    def __getitem__(self, item: ,) -> typing.Any:
        """
        Item getter (by key)

        :param item:
        :return:
        """
        ...
    
    def __setitem__(self, key: str, value: typing.Any) -> None:
        """
        Item setter (by key)

        :param key:
        :param value:
        :return:
        """
        ...
    
    def __contains__(self, item: str) -> bool:
        """
        Check key contains in that object

        :param item:
        :return:
        """
        ...
    
    def __iter__(self) -> ,:
        """
        Iterate over items

        :return:
        """
        ...
    
    def iter_keys(self) -> ,:
        """
        Iterate over keys

        :return:
        """
        ...
    
    def iter_values(self) -> ,:
        """
        Iterate over values

        :return:
        """
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other: TelegramObject) -> bool:
        ...
    


