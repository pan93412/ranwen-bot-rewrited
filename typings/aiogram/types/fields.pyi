"""
This type stub file was generated by pyright.
"""

import abc
import datetime

class BaseField(metaclass=abc.ABCMeta):
    """
    Base field (prop)
    """
    def __init__(self, *, base=..., default=..., alias=..., on_change=...) -> None:
        """
        Init prop

        :param base: class for child element
        :param default: default value
        :param alias: alias name (for e.g. field 'from' has to be named 'from_user'
                      as 'from' is a builtin Python keyword
        :param on_change: callback will be called when value is changed
        """
        ...
    
    def __set_name__(self, owner, name):
        ...
    
    def resolve_base(self, instance):
        ...
    
    def get_value(self, instance):
        """
        Get value for the current object instance

        :param instance:
        :return:
        """
        ...
    
    def set_value(self, instance, value, parent=...):
        """
        Set prop value

        :param instance:
        :param value:
        :param parent:
        :return:
        """
        ...
    
    def __get__(self, instance, owner):
        ...
    
    def __set__(self, instance, value):
        ...
    
    @abc.abstractmethod
    def serialize(self, value):
        """
        Serialize value to python

        :param value:
        :return:
        """
        ...
    
    @abc.abstractmethod
    def deserialize(self, value, parent=...):
        """Deserialize python object value to TelegramObject value"""
        ...
    
    def export(self, instance):
        """
        Alias for `serialize` but for current Object instance

        :param instance:
        :return:
        """
        ...
    


class Field(BaseField):
    """
    Simple field
    """
    def serialize(self, value):
        ...
    
    def deserialize(self, value, parent=...):
        ...
    


class ListField(Field):
    """
    Field contains list ob objects
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def serialize(self, value):
        ...
    
    def deserialize(self, value, parent=...):
        ...
    


class ListOfLists(Field):
    def serialize(self, value):
        ...
    
    def deserialize(self, value, parent=...):
        ...
    


class DateTimeField(Field):
    """
    In this field st_ored datetime

    in: unixtime
    out: datetime
    """
    def serialize(self, value: datetime.datetime):
        ...
    
    def deserialize(self, value, parent=...):
        ...
    


class TextField(Field):
    def __init__(self, *, prefix=..., suffix=..., default=..., alias=...) -> None:
        ...
    
    def serialize(self, value):
        ...
    
    def deserialize(self, value, parent=...):
        ...
    


