"""
This type stub file was generated by pyright.
"""

import logging
import typing

log = logging.getLogger('aiogram.Middleware')
class MiddlewareManager:
    """
    Middlewares manager. Works only with dispatcher.
    """
    def __init__(self, dispatcher) -> None:
        """
        Init

        :param dispatcher: instance of Dispatcher
        """
        ...
    
    @property
    def loop(self):
        ...
    
    def setup(self, middleware):
        """
        Setup middleware

        :param middleware:
        :return:
        """
        ...
    
    async def trigger(self, action: str, args: typing.Iterable):
        """
        Call action to middlewares with args lilt.

        :param action:
        :param args:
        :return:
        """
        ...
    


class BaseMiddleware:
    """
    Base class for middleware.

    All methods on the middle always must be coroutines and name starts with "on_" like "on_process_message".
    """
    def __init__(self) -> None:
        ...
    
    @property
    def manager(self) -> MiddlewareManager:
        """
        Instance of MiddlewareManager
        """
        ...
    
    def setup(self, manager):
        """
        Mark middleware as configured

        :param manager:
        :return:
        """
        ...
    
    def is_configured(self) -> bool:
        """
        Check middleware is configured

        :return:
        """
        ...
    
    async def trigger(self, action, args):
        """
        Trigger action.

        :param action:
        :param args:
        :return:
        """
        ...
    


class LifetimeControllerMiddleware(BaseMiddleware):
    skip_patterns = ...
    async def pre_process(self, obj, data, *args):
        ...
    
    async def post_process(self, obj, data, *args):
        ...
    
    async def trigger(self, action, args):
        ...
    


